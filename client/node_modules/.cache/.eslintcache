[{"D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\index.js":"1","D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\App.js":"2","D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\reportWebVitals.js":"3","D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\auth\\index.js":"4","D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\store\\index.js":"5","D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\components\\index.js":"6","D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\components\\AppBanner.js":"7","D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\components\\HomeWrapper.js":"8","D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\components\\EditToolbar.js":"9","D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\components\\RegisterScreen.js":"10","D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\components\\SplashScreen.js":"11","D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\components\\Statusbar.js":"12","D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\components\\HomeScreen.js":"13","D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\components\\WorkspaceScreen.js":"14","D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\components\\Top5Item.js":"15","D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\components\\ListCard.js":"16","D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\transactions\\UpdateItem_Transaction.js":"17","D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\common\\jsTPS.js":"18","D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\transactions\\MoveItem_Transaction.js":"19","D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\api\\index.js":"20","D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\components\\Copyright.js":"21","D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\components\\LoginScreen.js":"22","D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\components\\NoticeModal.js":"23"},{"size":958,"mtime":1635129078000,"results":"24","hashOfConfig":"25"},{"size":1379,"mtime":1635899115000,"results":"26","hashOfConfig":"25"},{"size":375,"mtime":1635129078000,"results":"27","hashOfConfig":"25"},{"size":3340,"mtime":1635993528000,"results":"28","hashOfConfig":"25"},{"size":14879,"mtime":1636079369000,"results":"29","hashOfConfig":"25"},{"size":858,"mtime":1636076816000,"results":"30","hashOfConfig":"25"},{"size":4186,"mtime":1635995447000,"results":"31","hashOfConfig":"25"},{"size":413,"mtime":1635129078000,"results":"32","hashOfConfig":"25"},{"size":1609,"mtime":1636078536000,"results":"33","hashOfConfig":"25"},{"size":5746,"mtime":1636151471817,"results":"34","hashOfConfig":"25"},{"size":163,"mtime":1635129078000,"results":"35","hashOfConfig":"25"},{"size":565,"mtime":1635129078000,"results":"36","hashOfConfig":"25"},{"size":1747,"mtime":1636076839000,"results":"37","hashOfConfig":"25"},{"size":1736,"mtime":1635129078000,"results":"38","hashOfConfig":"25"},{"size":4274,"mtime":1635998097000,"results":"39","hashOfConfig":"25"},{"size":3556,"mtime":1635129078000,"results":"40","hashOfConfig":"25"},{"size":752,"mtime":1635129078000,"results":"41","hashOfConfig":"25"},{"size":6687,"mtime":1635129078000,"results":"42","hashOfConfig":"25"},{"size":727,"mtime":1635129078000,"results":"43","hashOfConfig":"25"},{"size":1917,"mtime":1636079469000,"results":"44","hashOfConfig":"25"},{"size":466,"mtime":1635129078000,"results":"45","hashOfConfig":"25"},{"size":3629,"mtime":1636151527833,"results":"46","hashOfConfig":"25"},{"size":1361,"mtime":1636076753000,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"wu4p5f",{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"50"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\index.js",[],["99","100"],"D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\App.js",[],"D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\reportWebVitals.js",[],"D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\auth\\index.js",["101"],"import React, { createContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from 'react-router-dom'\r\nimport api from '../api'\r\n\r\nconst AuthContext = createContext();\r\nconsole.log(\"create AuthContext: \" + AuthContext);\r\n\r\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR AUTH STATE THAT CAN BE PROCESSED\r\nexport const AuthActionType = {\r\n    GET_LOGGED_IN: \"GET_LOGGED_IN\",\r\n    REGISTER_USER: \"REGISTER_USER\",\r\n    SET_LOGGED_OUT: \"SET_LOGGED_OUT\"\r\n}\r\n\r\nfunction AuthContextProvider(props) {\r\n    const [auth, setAuth] = useState({\r\n        user: null,\r\n        loggedIn: false\r\n    });\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        auth.getLoggedIn();\r\n    }, []);\r\n\r\n    const authReducer = (action) => {\r\n        const { type, payload } = action;\r\n        switch (type) {\r\n            case AuthActionType.GET_LOGGED_IN: {\r\n                return setAuth({\r\n                    user: payload.user,\r\n                    loggedIn: payload.loggedIn\r\n                });\r\n            }\r\n            case AuthActionType.REGISTER_USER: {\r\n                return setAuth({\r\n                    user: payload.user,\r\n                    loggedIn: true\r\n                })\r\n            }\r\n            case AuthActionType.SET_LOGGED_OUT: {\r\n                return setAuth({\r\n                    loggedIn: false\r\n                })\r\n            }\r\n            default:\r\n                return auth;\r\n        }\r\n    }\r\n\r\n    auth.getLoggedIn = async function () {\r\n        const response = await api.getLoggedIn();\r\n        if (response.status === 200) {\r\n            authReducer({\r\n                type: AuthActionType.SET_LOGGED_IN,\r\n                payload: {\r\n                    loggedIn: response.data.loggedIn,\r\n                    user: response.data.user\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    auth.registerUser = async function(userData, store) {\r\n        const response = await api.registerUser(userData);      \r\n        if (response.status === 200) {\r\n            authReducer({\r\n                type: AuthActionType.REGISTER_USER,\r\n                payload: {\r\n                    user: response.data.user\r\n                }\r\n            })\r\n            history.push(\"/\");\r\n            store.loadIdNamePairs();\r\n        }else if (response.status === 401) {\r\n            window.alert(\"the user has been existed, please login\");\r\n        }\r\n    }\r\n\r\n    auth.loginUser = async function(userData, store) {\r\n        const response = await api.loginUser(userData);\r\n        if (response.status === 200) {\r\n            authReducer({\r\n                type: AuthActionType.REGISTER_USER,\r\n                payload: {\r\n                    user: response.data.user\r\n                }\r\n            })\r\n            history.push(\"/\");\r\n            store.loadIdNamePairs();\r\n        }\r\n    }\r\n\r\n    auth.logoutUser = async function() {\r\n        const response = await api.logoutUser();\r\n        if (response.status === 200) {\r\n            authReducer({\r\n                type: AuthActionType.SET_LOGGED_OUT,\r\n            });\r\n            history.push(\"/\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <AuthContext.Provider value={{\r\n            auth\r\n        }}>\r\n            {props.children}\r\n        </AuthContext.Provider>\r\n    );\r\n}\r\n\r\nexport default AuthContext;\r\nexport { AuthContextProvider };\r\n","D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\store\\index.js",["102"],"import { createContext, useContext, useState } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport jsTPS from '../common/jsTPS'\r\nimport api from '../api'\r\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction'\r\nimport UpdateItem_Transaction from '../transactions/UpdateItem_Transaction'\r\nimport AuthContext from '../auth'\r\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\r\n\r\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\r\nexport const GlobalStoreContext = createContext({});\r\n\r\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\r\n// DATA STORE STATE THAT CAN BE PROCESSED\r\nexport const GlobalStoreActionType = {\r\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\r\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\r\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\r\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\r\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\r\n    UNMARK_LIST_FOR_DELETION: \"UNMARK_LIST_FOR_DELETION\",\r\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\r\n    SET_ITEM_EDIT_ACTIVE: \"SET_ITEM_EDIT_ACTIVE\",\r\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\"\r\n}\r\n\r\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\r\nconst tps = new jsTPS();\r\n\r\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\r\n// AVAILABLE TO THE REST OF THE APPLICATION\r\nfunction GlobalStoreContextProvider(props) {\r\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\r\n    const [store, setStore] = useState({\r\n        idNamePairs: [],\r\n        currentList: null,\r\n        newListCounter: 0,\r\n        listNameActive: false,\r\n        itemActive: false,\r\n        listMarkedForDeletion: null\r\n    });\r\n    const history = useHistory();\r\n\r\n    // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\r\n    const { auth } = useContext(AuthContext);\r\n\r\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\r\n    // HANDLE EVERY TYPE OF STATE CHANGE\r\n    const storeReducer = (action) => {\r\n        const { type, payload } = action;\r\n        switch (type) {\r\n            // LIST UPDATE OF ITS NAME\r\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\r\n                return setStore({\r\n                    idNamePairs: payload.idNamePairs,\r\n                    currentList: payload.top5List,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            // STOP EDITING THE CURRENT LIST\r\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                })\r\n            }\r\n            // CREATE A NEW LIST\r\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter + 1,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                })\r\n            }\r\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\r\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\r\n                return setStore({\r\n                    idNamePairs: payload,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            // PREPARE TO DELETE A LIST\r\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: payload\r\n                });\r\n            }\r\n            // PREPARE TO DELETE A LIST\r\n            case GlobalStoreActionType.UNMARK_LIST_FOR_DELETION: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            // UPDATE A LIST\r\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            // START EDITING A LIST ITEM\r\n            case GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: store.currentList,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: true,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            // START EDITING A LIST NAME\r\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: true,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            default:\r\n                return store;\r\n        }\r\n    }\r\n\r\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\r\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \r\n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\r\n\r\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\r\n    store.changeListName = async function (id, newName) {\r\n        let response = await api.getTop5ListById(id);\r\n        if (response.data.success) {\r\n            let top5List = response.data.top5List;\r\n            top5List.name = newName;\r\n            async function updateList(top5List) {\r\n                response = await api.updateTop5ListById(top5List._id, top5List);\r\n                if (response.data.success) {\r\n                    async function getListPairs(top5List) {\r\n                        response = await api.getTop5ListPairs();\r\n                        if (response.data.success) {\r\n                            let pairsArray = response.data.idNamePairs;\r\n                            storeReducer({\r\n                                type: GlobalStoreActionType.CHANGE_LIST_NAME,\r\n                                payload: {\r\n                                    idNamePairs: pairsArray,\r\n                                    top5List: top5List\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                    getListPairs(top5List);\r\n                }\r\n            }\r\n            updateList(top5List);\r\n        }\r\n    }\r\n\r\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\r\n    store.closeCurrentList = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\r\n            payload: {}\r\n        });\r\n        \r\n        tps.clearAllTransactions();\r\n        history.push(\"/\");\r\n    }\r\n\r\n    // THIS FUNCTION CREATES A NEW LIST\r\n    store.createNewList = async function () {\r\n        let newListName = \"Untitled\" + store.newListCounter;\r\n        let payload = {\r\n            name: newListName,\r\n            items: [\"?\", \"?\", \"?\", \"?\", \"?\"],\r\n            ownerEmail: auth.user.email\r\n        };\r\n        const response = await api.createTop5List(payload);\r\n        if (response.data.success) {\r\n            tps.clearAllTransactions();\r\n            let newList = response.data.top5List;\r\n            storeReducer({\r\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\r\n                payload: newList\r\n            }\r\n            );\r\n\r\n            // IF IT'S A VALID LIST THEN LET'S START EDITING IT\r\n            history.push(\"/top5list/\" + newList._id);\r\n        }\r\n        else {\r\n            console.log(\"API FAILED TO CREATE A NEW LIST\");\r\n        }\r\n    }\r\n\r\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\r\n    store.loadIdNamePairs = async function () {\r\n        const response = await api.getTop5ListPairs();\r\n        if (response.data.success) {\r\n            let pairsArray = response.data.idNamePairs;\r\n            storeReducer({\r\n                type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\r\n                payload: pairsArray\r\n            });\r\n        }\r\n        else {\r\n            console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n        }\r\n    }\r\n\r\n    // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\r\n    // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\r\n    // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\r\n    // showDeleteListModal, and hideDeleteListModal\r\n    store.markListForDeletion = async function (id) {\r\n        // GET THE LIST\r\n        let response = await api.getTop5ListById(id);\r\n        if (response.data.success) {\r\n            let top5List = response.data.top5List;\r\n            storeReducer({\r\n                type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\r\n                payload: id\r\n            });\r\n            store.showDeleteListModal();\r\n        }\r\n    }\r\n\r\n    store.deleteList = async function (listToDelete) {\r\n        let response = await api.deleteTop5ListById(listToDelete);\r\n        if (response.data.success) {\r\n            store.loadIdNamePairs();\r\n            history.push(\"/\");\r\n        }\r\n        store.hideDeleteListModal();\r\n    }\r\n\r\n    store.deleteMarkedList = function () {\r\n        store.deleteList(store.listMarkedForDeletion);\r\n    }\r\n\r\n    store.unmarkListForDeletion = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.UNMARK_LIST_FOR_DELETION,\r\n            payload: null\r\n        });\r\n    }\r\n\r\n    store.showDeleteListModal = function() {\r\n        let modal = document.getElementById(\"delete-modal\");\r\n        modal.classList.add(\"is-visible\");\r\n    }\r\n\r\n    store.hideDeleteListModal = function() {\r\n        let modal = document.getElementById(\"delete-modal\");\r\n        modal.classList.remove(\"is-visible\");\r\n    }\r\n\r\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\r\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\r\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\r\n    // moveItem, updateItem, updateCurrentList, undo, and redo\r\n    store.setCurrentList = async function (id) {\r\n        let response = await api.getTop5ListById(id);\r\n        if (response.data.success) {\r\n            let top5List = response.data.top5List;\r\n\r\n            response = await api.updateTop5ListById(top5List._id, top5List);\r\n            if (response.data.success) {\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                    payload: top5List\r\n                });\r\n                history.push(\"/top5list/\" + top5List._id);\r\n            }\r\n        }\r\n    }\r\n\r\n    store.addMoveItemTransaction = function (start, end) {\r\n        let transaction = new MoveItem_Transaction(store, start, end);\r\n        tps.addTransaction(transaction);\r\n    }\r\n\r\n    store.addUpdateItemTransaction = function (index, newText) {\r\n        let oldText = store.currentList.items[index];\r\n        let transaction = new UpdateItem_Transaction(store, index, oldText, newText);\r\n        tps.addTransaction(transaction);\r\n    }\r\n\r\n    store.moveItem = function (start, end) {\r\n        start -= 1;\r\n        end -= 1;\r\n        if (start < end) {\r\n            let temp = store.currentList.items[start];\r\n            for (let i = start; i < end; i++) {\r\n                store.currentList.items[i] = store.currentList.items[i + 1];\r\n            }\r\n            store.currentList.items[end] = temp;\r\n        }\r\n        else if (start > end) {\r\n            let temp = store.currentList.items[start];\r\n            for (let i = start; i > end; i--) {\r\n                store.currentList.items[i] = store.currentList.items[i - 1];\r\n            }\r\n            store.currentList.items[end] = temp;\r\n        }\r\n\r\n        // NOW MAKE IT OFFICIAL\r\n        store.updateCurrentList();\r\n    }\r\n\r\n    store.updateItem = function (index, newItem) {\r\n        store.currentList.items[index] = newItem;\r\n        store.updateCurrentList();\r\n    }\r\n\r\n    store.updateCurrentList = async function () {\r\n        const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\r\n        if (response.data.success) {\r\n            storeReducer({\r\n                type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                payload: store.currentList\r\n            });\r\n        }\r\n    }\r\n\r\n    store.undo = function () {\r\n        tps.undoTransaction();\r\n    }\r\n\r\n    store.redo = function () {\r\n        tps.doTransaction();\r\n    }\r\n\r\n    store.canUndo = function() {\r\n        return tps.hasTransactionToUndo();\r\n    }\r\n\r\n    store.canRedo = function() {\r\n        return tps.hasTransactionToRedo();\r\n    }\r\n\r\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\r\n    store.setIsListNameEditActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\r\n            payload: null\r\n        });\r\n    }\r\n\r\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING AN ITEM\r\n    store.setIsItemEditActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE,\r\n            payload: null\r\n        });\r\n    }\r\n\r\n    return (\r\n        <GlobalStoreContext.Provider value={{\r\n            store\r\n        }}>\r\n            {props.children}\r\n        </GlobalStoreContext.Provider>\r\n    );\r\n}\r\n\r\nexport default GlobalStoreContext;\r\nexport { GlobalStoreContextProvider };\r\n","D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\components\\index.js",[],"D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\components\\AppBanner.js",[],"D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\components\\HomeWrapper.js",[],"D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\components\\EditToolbar.js",[],"D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\components\\RegisterScreen.js",["103"],"D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\components\\SplashScreen.js",[],"D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\components\\Statusbar.js",[],"D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\components\\HomeScreen.js",["104"],"import React, { useContext, useEffect } from 'react'\r\nimport { GlobalStoreContext } from '../store'\r\nimport ListCard from './ListCard.js'\r\nimport { Fab, Typography } from '@mui/material'\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport List from '@mui/material/List';\r\nimport NoticeModal from './NoticeModal'\r\n/*\r\n    This React component lists all the top5 lists in the UI.\r\n    \r\n    @author McKilla Gorilla\r\n*/\r\nconst HomeScreen = () => {\r\n    const { store } = useContext(GlobalStoreContext);\r\n\r\n    useEffect(() => {\r\n        store.loadIdNamePairs();\r\n    }, []);\r\n\r\n    function handleCreateNewList() {\r\n        store.createNewList();\r\n    }\r\n    let listCard = \"\";\r\n    if (store) {\r\n        listCard = \r\n            <List sx={{ width: '90%', left: '5%', bgcolor: 'background.paper' }}>\r\n            {\r\n                store.idNamePairs.map((pair) => (\r\n                    <ListCard\r\n                        key={pair._id}\r\n                        idNamePair={pair}\r\n                        selected={false}\r\n                    />\r\n                ))\r\n            }\r\n            </List>;\r\n    }\r\n    return (\r\n        <div id=\"top5-list-selector\">\r\n            <div id=\"list-selector-heading\">\r\n            <Fab \r\n                color=\"primary\" \r\n                aria-label=\"add\"\r\n                id=\"add-list-button\"\r\n                onClick={handleCreateNewList}\r\n            >\r\n                <AddIcon />\r\n            </Fab>\r\n                <Typography variant=\"h2\">Your Lists</Typography>\r\n            </div>\r\n            <div id=\"list-selector-list\">\r\n                {\r\n                    listCard\r\n                }\r\n                <NoticeModal />\r\n            </div>\r\n        </div>)\r\n}\r\n\r\nexport default HomeScreen;\r\n","D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\components\\WorkspaceScreen.js",[],"D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\components\\Top5Item.js",["105"],"import { React, useContext, useState } from \"react\";\r\nimport { GlobalStoreContext } from '../store'\r\nimport TextField from '@mui/material/TextField';\r\nimport Box from '@mui/material/Box';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\n/*\r\n    This React component represents a single item in our\r\n    Top 5 List, which can be edited or moved around.\r\n    \r\n    @author McKilla Gorilla\r\n*/\r\nfunction Top5Item(props) {\r\n    const { store } = useContext(GlobalStoreContext);\r\n    const [editActive, setEditActive] = useState(false);\r\n    const [draggedTo, setDraggedTo] = useState(0);\r\n\r\n    function handleDragStart(event, targetId) {\r\n        event.dataTransfer.setData(\"item\", targetId);\r\n    }\r\n\r\n    function handleDragOver(event) {\r\n        event.preventDefault();\r\n    }\r\n\r\n    function handleDragEnter(event) {\r\n        event.preventDefault();\r\n        console.log(\"entering\");\r\n        setDraggedTo(true);\r\n    }\r\n\r\n    function handleDragLeave(event) {\r\n        event.preventDefault();\r\n        console.log(\"leaving\");\r\n        setDraggedTo(false);\r\n    }\r\n\r\n    function handleDrop(event, targetId) {\r\n        event.preventDefault();\r\n        let sourceId = event.dataTransfer.getData(\"item\");\r\n        sourceId = sourceId.substring(sourceId.indexOf(\"-\") + 1);\r\n        setDraggedTo(false);\r\n\r\n        console.log(\"handleDrop (sourceId, targetId): ( \" + sourceId + \", \" + targetId + \")\");\r\n\r\n        // UPDATE THE LIST\r\n        store.addMoveItemTransaction(sourceId, targetId);\r\n    }\r\n\r\n    function handleKeyPress(event) {\r\n        if (event.code === \"Enter\") {\r\n            let index = event.target.id.substring(\"list-\".length);\r\n            let text = event.target.value;\r\n            store.addUpdateItemTransaction(index-1, text);\r\n            toggleEdit();\r\n        }\r\n    }\r\n\r\n    function handleToggleEdit(event) {\r\n        event.stopPropagation();\r\n        toggleEdit();\r\n    }\r\n\r\n    function toggleEdit() {\r\n        let newActive = !editActive;\r\n        if (newActive) {\r\n            store.setIsItemEditActive();\r\n        }\r\n        setEditActive(newActive);\r\n    }\r\n\r\n    let editStatus = false;\r\n    if (store.isItemEditActive) {\r\n        editStatus = true;\r\n    }\r\n    let { index } = props;\r\n\r\n    if (editActive) {\r\n        return (\r\n            <input\r\n                id={\"item-\" + (index+1)}\r\n                className='top5-item'\r\n                type='text'\r\n                onKeyPress={handleKeyPress}\r\n                defaultValue={props.text}\r\n            />)\r\n    }\r\n    else {\r\n\r\n    let itemClass = \"top5-item\";\r\n    if (draggedTo) {\r\n        itemClass = \"top5-item-dragged-to\";\r\n    }\r\n\r\n    return (\r\n            <ListItem\r\n                id={'item-' + (index+1)}\r\n                key={props.key}\r\n                className={itemClass}\r\n                onDragStart={(event) => {\r\n                    handleDragStart(event, (index+1))\r\n                }}\r\n                onDragOver={(event) => {\r\n                    handleDragOver(event, (index+1))\r\n                }}\r\n                onDragEnter={(event) => {\r\n                    handleDragEnter(event, (index+1))\r\n                }}\r\n                onDragLeave={(event) => {\r\n                    handleDragLeave(event, (index+1))\r\n                }}\r\n                onDrop={(event) => {\r\n                    handleDrop(event, (index+1))\r\n                }}\r\n                draggable=\"true\"\r\n                sx={{ display: 'flex', p: 1 }}\r\n                style={{\r\n                    fontSize: '48pt',\r\n                    width: '100%'\r\n                }}\r\n            >\r\n            <input\r\n                disabled={editStatus}\r\n                type=\"button\"\r\n                id={\"edit-item-\" + index+1}\r\n                className=\"list-card-button\"\r\n                onClick={handleToggleEdit}\r\n                value={\"\\u270E\"}\r\n            />\r\n            <Box sx={{ p: 1 }}>\r\n                <IconButton aria-label='edit'>\r\n                    <EditIcon style={{fontSize:'48pt'}}  />\r\n                </IconButton>\r\n            </Box>\r\n                <Box sx={{ p: 1, flexGrow: 1 }}>{props.text}</Box>\r\n            </ListItem>\r\n    )}\r\n}\r\n\r\nexport default Top5Item;\r\n","D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\components\\ListCard.js",[],"D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\transactions\\UpdateItem_Transaction.js",[],"D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\common\\jsTPS.js",[],"D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\transactions\\MoveItem_Transaction.js",[],"D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\api\\index.js",[],"D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\components\\Copyright.js",[],"D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\components\\LoginScreen.js",[],"D:\\VS Code Document\\Top5Lists_HW4\\Top5Lists_HW4\\client\\src\\components\\NoticeModal.js",[],{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":24,"column":8,"nodeType":"112","endLine":24,"endColumn":10,"suggestions":"113"},{"ruleId":"114","severity":1,"message":"115","line":254,"column":17,"nodeType":"116","messageId":"117","endLine":254,"endColumn":25},{"ruleId":"118","severity":1,"message":"119","line":25,"column":42,"nodeType":"120","messageId":"121","endLine":25,"endColumn":44},{"ruleId":"110","severity":1,"message":"122","line":18,"column":8,"nodeType":"112","endLine":18,"endColumn":10,"suggestions":"123"},{"ruleId":"114","severity":1,"message":"124","line":3,"column":8,"nodeType":"116","messageId":"117","endLine":3,"endColumn":17},"no-native-reassign",["125"],"no-negated-in-lhs",["126"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'auth'. Either include it or remove the dependency array.","ArrayExpression",["127"],"no-unused-vars","'top5List' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'store'. Either include it or remove the dependency array.",["128"],"'TextField' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},"Update the dependencies array to be: [auth]",{"range":"133","text":"134"},"Update the dependencies array to be: [store]",{"range":"135","text":"136"},[694,696],"[auth]",[571,573],"[store]"]